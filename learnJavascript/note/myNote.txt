在html中的输出流只能使用document.write

1、语句块
	if(2>1){
		x=1;
		y=2;
		z=3;
	}

2、数据类型
	Number
		123,0.121,NaN,Infinity
		NaN:not a number,无法计算结果就用这个表示
		Infinity:无限大

3、字符串
	用单引号或者双引号（建议用单引号）

4、boolean值
	true和false

5、比较运算符
	==自动转换类型然后比较：false==0;//true
	===不会自动转换类型：flase===0//false，建议使用===
	NaN与所有其他的值都不相等，包括与它自己都不相等：NaN===NaN;//false，只有函数isNaN()能够判断NaN，isNaN(NaN);//true

6、null和undefined
	两者都表示为空，基本没区别

7、数组
	var arr=new Array{1,2,3}
	var arr=[1,2,3,'hello',null,true]

8、对象
	一组由键值组成的无序集合
	var person={
		name:'gyy',
		age:20,
		tags:['js','web']
	}
	获取对象的属性：person.name;//gyy

9、赋值
	js是动态语言，可以对同一变量重复赋不同类型的值
	var a=123;
	a='abc'
	一个美誉通过var声明的变量会自动转化为全局变量
	i=10;//i是全局变量

10、输出
	console.log()和aler()都是输出，但是后者会弹出对话框

11、strict模式
	在代码的第一行写上：'use strict';//强制让申明变量通过var执行，否则报错

12、多行字符串
	普通字符串可以使用单引号和双引号，多行字符串可以使用反引号：
	`this is
	a muti-lines
	string`;

13、链接字符串
	+号//和java一样
	使用模板字符串链接：
	var preString='my name is';
	var laterString='gyy';
	var myName=`${preString}${laterString}`;

14、操作字符串
	字符串是不可变的，js提供了一些函数，他们也不会改变原来的字符串，而是返回一个新的字符串
	toUpperCase()//将字符串变为大写
	toLowerCase()//变为小写
	indexOf()//搜索指定字符串出现的位置
	substring()//返回指定区间的字符串

15、可以直接通过数组的length来获取数组的长度
	直接给length赋一个新值，也会改变数组的长度。
	数组可以包含任意类型的数据
	var arr=[1,'ab',null];
	arr.length;//3
	arr.length=4;//arr变为[1,'ab',null,undefined,undefined];
	arr.length=2;//arr变为[1,'ab']

16、操作数组
	indexOf();//返回指定元素的位置
	slice();//substring()的数组版本，当不给slice()参数，那么就复制整个数组
	push();//向末尾添加若干元素：arr.push('a','B');
	pop();返回最后一个元素
	unshift();//向数组头部添加若干元素：arr.unshift('A','B');
	shift();//删掉数组第一个元素
	sort();//排序函数
	reverse();//反转元素位置
	splice();//可以从指定位置删除指定数量元素，然后从该位置加入若干元素：arr.splice(2,3,'a','b');//从位置2开始删除3个元素，然后再在位置2加入两个元素'a','b'
	concat();//连接两个数组，返回新数组，此外，他可以接受任意个数组作为参数：
		var arr=['a','b','c'];
		arr.concat(1,2,[3,4]);//arr={'a','b','c',1,2,3,4}
	join();//将当前数组的每一个元素指定的字符链接起来，然后返回链接的字符串：
		var arr=['a',1,2];
		arr.join('-');//a-1-2

17、多维数组：当数组的元素又是数组时，就形成了多维数组

18、对象
	如果对象的属性名中含有特殊字符，那么需要用单引号将属性名括起来：
		var gyy={
			name:'gyy',
			'middle-school':'Chengnan Middle School'
		}
	访问这个属性需要使用中括号['xxx']而不是.：
		gyy['middle-school'];//'Chengnan Middle School'
	可以动态给对象添加和删除属性
		gyy.age=18;//新增了一个age属性
		delete gyy.age;//删除了age属性
	可以用in判断一个属性在不在对象中
		'name' in gyy;//true
		'age' in gyy;//false
	hasOwnProperty()方法判断一个属性是对象自身拥有的还是继承得到的
		gyy.hasOwnProperty('name');//true
		gyy.hasOwnProperty('toString');//false

19、循环
	for(;;)//无限循环
	for...in循环，可以把对象的所有的属性依次循环出来
		var o={
			name:'gyy',
			age:18,
			city:'Wuhan'
		};
		for(var key in o){
			console.log(key);//'name','age','city'
		}
	for...in循环读取对象的属性的值的时候，不能够使用.，必须使用[]，否则结果为undefined
		var obj={
 		       name:'gyy',
       		       age:18,
       		       city:'Wuhan'
		};
		for(var key in obj){
        	       console.log(key);
        	       console.log(obj[key]);
		}
	for...in循环得到的结果是String，即使在数组中循环
		var arr=['a','b','c'];
		for(var i in arr){
			console.log(i);//'0','1','2'
			console.log(a[i]);//'a','b','c'
		}

20、Map
	由于对象的属性名必须是字符串，而不能是数字等其他的，所以引入了Map
	var map=new Map([['gyy',20],['gyy2',30]]);
	map.get('gyy');//20
	map.set('abc',40);//添加新的key-value
	map.has('abc');//true,存在键abc
	map.delete('gyy2');//删除键gyy2

21、Set
	Set和Map类似，只不过Set只包含键而没有值，并且Key不能重复
	var set1=new Set();
	var set2=new Set([1,2,3]);//含1,2,3
	set1.add(1);//添加元素
	set1.delete(1);//删除元素

22、遍历Array,Map,Set
	除了Array可以使用下标，Map和Set都不能使用下标，所以将他们定义为iterable类型
	通过for...of循环遍历它们	
	for...of与for...in区别不大，但是for...of会更好一点，因为for...of只包含对象本身的元素
	iterable类型具有一个内置的方法forEach()，他的参数是一个函数，每次迭代就会调用这个函数
		var a=['a','b','c'];
		var s=new Set(['a','b','c']);
		var m=new Map([[1,'x'],[2,'y'],[3,'z']]);
		a.forEach(function(element,index,array){
			//element:指向当前元素的值
			//index:指向当前索引
			//array:指向array对象本身
			console.log('value='+element+',index='+index+',object='+array);
		})
		s.forEach(function(element,sameElement,set){
			//element和sameElement都是Set中保存的key，因为Set只有key没有value
			//set:指向set对象本身
			console.log('key='+element+',object'+set);
		})
		m.forEach(function(value,key,map){
			//value:指向当前键的值
			//key:指向当前的键
			//map:指向map对象本身
			console.log('value='+value+',key='+key+',map'+map);
		})
		//当不需要某些参数的时候，也可以省略那些参数
		a.forEach(function(element){
			//只获取element
			console.log(element);
		})

23、函数
	如果一个函数不是由return语句结束的，那么返回的结果就是undefined
	一个函数也是一个对象，所以函数两种定义方式：
		function func(x){};
		var func=function(x){};
	调用的方式都是顺序传入参数
	当传入的参数比定义的参数多的时候，没有什么影响，但是当传入的参数比定义的参数少的时候，就会返回NaN
	每一个函数内部都有一个默认的参数，就是arguments，它是一个数组，所以可以用arguments.length获取传入的参数的个数，作用类似于c/c++的argv和args
		function abs(){
			if(arguments.length===0){
				return 0;
			}
			for(var i=0;i<arguments.length;i++){
				console.log(arguments[i]);
			}
			return 0;
		}
		abs();
		abs(1,2);
		abs(1,'ab',null);
	当参数可变的时候，如果要获取后面的所有的参数，那么就需要使用变量rest
	rest参数写在最后，前面用...标识，传入的参数首先匹配前面定义的采纳数，如果有多余的，rest中就是多余参数的数组，否则rest数组中就是undefined
		function foo(a,b,...rest){
			console.log('a='+a+',b='+b);
			console.log('rest='+rest);
		}
		foo(1,2,3,4,5);
		foo(1);
24、变量提升
	在js中，会首先扫描整个函数体的语句，把所有的变量的声明提升到函数顶部：
		'use strict'
		function foo(){
			var x='hello'+y;
			console.log(x);
			var y='world';
		}
	这个函数不会报错，它的输出是hello undefined，因为它将y的声明提升到了函数顶部，但是y的初始化却在这条输出语句之后。

25、全局作用域
	js有一个默认的全局对象window，全局变量实际上就是在这个对象上面增加了一条属性
	因此，直接访问全局变量和 访问window.variable的效果是一样的。

26、let关键字
	let代替var可以申明一个块级作用域的变量
	在js中的变量的作用域是函数内部，所以使用var是无法在for循环等语句中定义局部作用域变量的
		function foo(){
   		      var sum=0;
    		      for(var i=0;i<10;i++){
       		      	  sum+=i;
    		      }
    		      sum+=i;//此时已经除了for循环的作用域，但是变量i还是可以使用，因为是使用关键字var定义的变量
    		      return sum;
		}
		function bar(){
 		      var sum=0;
    		      for(let i=0;i<10;i++){
        		  sum+=i;
    		      }
    		      var i=10;//此时已经出了for循环的作用域，并且变量i已经不能使用了，因为是用的关键字let定义的变量，变量i需要重新声明
    		      sum+=i;
    		      return sum;
		}

27、常量
	使用关键字const定义常量
		const Pi=3.14

28、解构赋值
	直接对多个变量同时赋值
		var [x,y,z]=['g','y','y'];
	如果数组本身还有嵌套，那么两边的嵌套层次要保持一样
		var [x1,[y1,z1]]=['g',['y','y']];
	解构赋值还可以忽略某些元素进行赋值
		var [,,name]=['alice','bob','gyy'];
	如果需要从一个对象中读取某些属性，也可以使用解构赋值，但是两边的属性名必须保持一样
		var person={
    			name:'gyy',
    			age:18,
    			gender:'male',
    			passport:'U201514848',
    			school:'Chengnan Middle School',
    			address:{
        			city:'Wuhan',
        			street:'Luoyu Road No.1037',
        			zipcode:1001
    				}
			}
		var {name,age,passport}=person;

29、方法
	当一个函数被绑定到了一个对象中，就称之为方法
	每一个方法中都有一个this关键字，它指向当前对象实例
		var Bob={
			name:'Bob',
			birth:1995,
			age:function(){
				var y=new Date().getFullYear();
				return y-this.birth;
			}
		}
	Bob.age;//输出这个属性对应的方法
	Bob.age();//调用Bob的age()方法，打印Bob的年龄
	在方法中嵌套方法，此时如果在最里面的方法中直接使用this，那么this并不能指向当前对象，从而会报错，正确的方法是在外面先定义一个that来指向this
		var Bob={
			name:'Bob',
			birth:1995,
			age:function(){
				var that=this;//that指向当前对象
				function getAgeFromBirth(){
					var y=new Date().getFullYear();
					//return y-this.birth;//会报错，因为在内部函数中，this并不会指向当前对象
					return y-that.birth;
				}
				return getAgeFromBirth();
			}
		}
	当将方法写在对象外面，并且在方法中使用了this关键字，就必须通过对象名来调用或者使用外部方法的apply()或者call()方法来调用对象
	此外，在对象内部的属性的值表示时，只需要方法名，而不需要添加方法的括号，以及参数，不然会报错。
		function getAge(){
    			var y=new Date().getFullYear();
        		return y-this.birth;
		}
		var Alice={
    			name:'alice',
    			birth:1996,
    			age:getAge//这个地方只需要方法名，而不需要加括号或者参数，否则会报错
		};
		console.log(Alice.age());
		console.log(getAge.apply(Alice,[]));
		console.log(getAge.call(Alice));

30、高阶函数
	一个函数作为另一个函数的参数，就是高阶函数
	Math.abs()是求绝对值的函数
		function add(x,y,f){
			return f(x)+f(y);
		}
		var x=add(-5,6,Math.abs);//11，在这个地方，函数作为参数，也只需要函数名，而不需要括号及参数，否则会报错
	map()是定义在数组上面的一个高阶函数，它传入的参数是一个函数，它的作用是让这个函数（参数）一次调用原来数组的每一个元素，并产生一个结果，然后让这些结果生成一个新的数组作为结果输出。
		function pow(x){
			return x*x;
		}
		var arr=[1,2,3,4,5,6,7,8,9]
		var result=arr.map(pow);//result是一个数组，元素为1,4,9,16,25,36,49,64,81
	reduce()作为一个定义在数组上的高阶函数，它的作用是一直做迭代计算，例如先计算前两个数组元素，得到一个结果，然后将这结果继续和后面的元素计算...
		[x1,x2,x3,x4].reduce(f)=f(f(f(x1,x2),x3),x4)
		//求和
		var arr=[1,3,5,7,9];
		arr.reduce(function(x,y){
			return x+y;
		}})
	filter()作为定义在数组上的一个高阶函数，他的作用是将传入的函数依次作用于数组的每一个元素，依据返回值为true还是false决定在新数组中丢弃还是保留该元素。
	filter()接收的回调函数可以有3个参数，第一个是数组元素（就是数组的元素），第二个是元素的位置，第三个是数组本身
		var arr=['A','B','C'];
		var r=arr.filter(function(element,index,self){
			//element:元素
			//index:元素的位置
			//self:数组本身
			return true
		})
	sort()也是定义在数组上的高阶函数，作用是排序
	和c++中的sort()函数的用法区别不大，如果返回>=0就是正确结果，不用变换顺序，否则就是错误结果，要变换顺序
		var arr=[10,20,1,2];
		arr.sort(function(x,y){
			if(x<y){
				return -1;
			}
			if(x>y){
				return 1;
			}
			return 0;
		})
		console.log(arr);
	如果不对sort的参数传入回调函数，那么默认的数组的所有的类型的数据都会转换为string，然后按照ascii码进行排序
	此外，和其他数组的高阶函数不同的是，sort()并没有返回一个新的数组，而是在原来的数组上面排序。
	every(),传入一个函数作为参数，用来判断数组是不是每一个元素都满足指定条件
		var arr=[10,20,1,2];
		arr.every(function(x){
			return x>0;
		})//结果为true，因为每一个元素都大于0
	find()查找数组中满足条件的第一个元素，并且返回这个元素
		var arr=[10,20,1,2];
		arr.find(function(x){
			return x===1;
		})//返回元素1
	findIndex()和find()类似，但是它是返回查找到的元素的下标
		var arr=[10,20,1,2];
		arr.findIndex(function(x){
			return x===1;
		})//返回值为2

31、闭包
	闭包的主要思想就是返回一个函数给一个类似与函数指针的东西，然后通过这个函数指针来重新调用函数，它的另一个思想就是当函数
	指针没有真正被执行的时候，返回的那个函数是不会被执行的，执行的只是闭包中，将函数赋值给函数指针的函数
		function count(){
    		var arr1=[];
    		for(var i=1;i<=3;i++){
        		arr1.push(function(){
            		return i*i;
        		})
    		}
    		return arr1;
		}
		var result=count();
		var f1=result[0];
		var f2=result[1];
		var f3=result[2];
		console.log(f1());
		console.log(f2());
		console.log(f3());
		/*
		上面3个输出都是16，因为在执行语句var result=count()的时候，就已经在执行1到3的循环了，所以数组arr1中三个元素
		是三个函数，并且如果执行函数返回的结果都是i*i，注意是i*i，然后当循环结束以后，已经给arr1数组赋值了，然后f1,f2,f3
		又是三个函数，他们被result中的元素赋值，所以是三个函数，然后此时i的值是4，最后再调用f1(),f2(),f3()的时候，返回的结果
		是i*i,也就是4*4，所以结果为16
		*/

		function count2(){
    		var arr2=[];
    		for(var j=1;j<=3;j++){
        		arr2.push((function(n){
            		return function(){
                		return n*n;
            		}
        		})(j));
    		}
    		return arr2;
		}
		var result2=count2();
		var f4=result2[0];
		var f5=result2[1];
		var f6=result2[2];
		console.log(f4());
		console.log(f5());
		console.log(f6());
		/*
		在这里返回的结果是1,4,9，因为这里使用了创建匿名函数并且立即执行的语法：
    	(function(x){return x*x;})(3);值得注意的是前面的function必须用括号括起来，否则会报错
    	所以在后面调用的f4,f5,f6的时候，执行的就不是j*j，例如，此时返回给f4的函数就是在前面的匿名函数立即执行的时候传入了参数n,
    	而n和当时的j的值绑定了。
		*/
	当计算x的y次方时，经常需要使用函数Math.pow(x,y)，此外如果需要京城计算x的平方和立方，那么可以用闭包返回pow2和pow3
		function make_pow(n){
			return function(x){
				return Math.pow(x,n);
			}
		}
		//创建两个新函数：
		var pow2=make_pow(2);
		var pow3=make_pow(3);
		console.log(pow2(5));
		console.log(pow3(7));
		在创建新函数的时候，传入了参数n，此时执行的是外层的赋值函数，真正的返回函数是没有执行的，必须等到后面调用pow2和pow3的
		时候才执行，所以x还是x，但是由于执行了外层函数，所以n已经不是参数，而是实际的值了

32、箭头函数
	当返回一个对象的时候，如果是单表达式应该这样写：
		x=>({foo:x});//前面必须加小括号，否则会报错
	箭头修复了this的指向，this总是指向词法作用域，也就是外层调用者的obj
		var obj={
			birth:1990,
			getAge:function(){
				var b=this.birth;
				var fn=()=>new Date().getFullYear()-this.birth;//前面()表示传入的参数为空，this指向obj对象
			}
		}	
		obj.getAge();//29
	this在箭头函数中的作用域已经被指定，所以在使用call()和apply()调用箭头函数时，无法对this进行绑定，所以第一个参数（对象名）被忽略了。

33、generator生成器
	generator看上去像函数，但是它可以多次返回
	generator有function*定义，除了使用return语句返回，在这之前还多次使用yield语句返回
		function* foo(x){
			yield x+1;
			yield x+2;
			return x+3;
		}
	如下计算Fibonacci数列：
		function* fib(max){
			var [a,b,n]=[0,1,0];
			while(n<max){
				yield a;
				[a,b]=[b,a+b];
				n++;
			}
			return;
		}
	两种方式调用generator对象，next和for...of

34、标准对象
	通过typedf操作符来获取对象类型
		typedof 123;//number
		typedof null;//object
	包装对象，将类型转化为object
		var n=new Number(123);
		var s=new String('str');
		var b=new Boolean(true);
	如果不使用new，那么就转化为对应的类型
		var n=Number('123');
		typedof n;//number
35、Date
	var now = new Date();
	now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
	now.getFullYear(); // 2015, 年份
	now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
	now.getDate(); // 24, 表示24号
	now.getDay(); // 3, 表示星期三
	now.getHours(); // 19, 24小时制
	now.getMinutes(); // 49, 分钟
	now.getSeconds(); // 22, 秒
	now.getMilliseconds(); // 875, 毫秒数
	now.getTime(); // 1435146562875, 以number形式表示的时间戳，时间戳是重1970年1月1日0时的GMT失去开始到现在的毫秒数
	在js中，创建一个Date对象
		var d=new Date(2015,5,19,20,15,30,123);
		注意：传入月份参数的时候，是0-11表示1-12月份

36、RegExp正则表达式
	\d:数字
	\w:数字或字母
	. :任意字符
	* :任意个字符（可以为0）
	+ :表示至少一个字符
	? :表示0个或者1个字符
	{n}:表示n个字符
	{n,m}:表示n-m个字符
	\s:表示空格或者\t
	特殊字符需要使用\转义，例如-必须转义为\-
	[]:表示范围，用于更加精确的匹配
	A|B:表示必须为A或者B
	^ :表示必须以什么开头，如^\d表示必须以数字开头
	$ :表示必须以什么结束，如\d$表示必须以数字结束
	在js中可以通过两种方式声明正则表达式，一种是/正则表达式/，另一种是new RegExp('正则表达式')
		var re1=/ABC\-001/;
		var res=new RegExp('ABC\\-001');//因为转义的原因，所以\\实际上相当于\
	使用test()方法测试是否匹配正确
		var re=/^\d{3}\-\d{3-8}$/;
		re.test('010-123456');//true
		re.test('010-1234x');//false

37、切分字符串
	正常切分
		'a b   c'.split(' ');//'a','b','','','c'，无法识别连续的空格
	正则表达式切分
		'a b   c'.split(/\s+/);//'a','b','c'
		'a,b;; c  d'.split(/[\s\,\;]+/);//'a','b','c'

38、分组
	()表示要提取的分组
	^(\d{3})-(\d{3,8})$分别定义了两个分组，可以从字符串中提取号码的两个部分
		var re=/^(\d{3})-(\d{3,8})$/;
		re.exec('010-123456');//'010' '123456'
		re.exec('010 123456');//null

39、贪婪匹配
	正则匹配默认的是贪婪匹配，尽可能匹配更多的字符
		var re=/^(\d+)(0*)$/;
		re.exec('102300');

40、全局搜索
	js有几个特殊的标志，最常见的是g，表示全局匹配
		var r1=/test/g;
		//等价于
		var r2=new RegExp('test','g');
	全局匹配可以多次执行exec()方法来搜索一个匹配的字符串，当指定g标志后，每次运行，正则表达式会更新lastIndex属性，表示上次匹配到的最后的索引
		var s='JavaScript,VBScript,JScript and ECMAScript';
		var re=/[a-zA-Z]+Script/g;
		//使用全局匹配
		re.exec(s);//JavaScript
		re.lastIndex;//10
		re.exec(s);//VBScript
	全局匹配不能使用/^...$/，因为这样会只匹配一次
	此外,i标志表示忽略大小写，m标志表示执行多行匹配

41、JSON
	必须使用utf-8字符集，字符串必须使用双引号"",Object的键也必须使用""
	将对象序列化为JSON字符串
		var gyy={
			name:'gyy',
			age:14,
			skills:['c/c++','java','js'],
			address:{
				city:'wuhan',
				street:'luoyulu'
		}
		}
		var s=JSON.stringify(gyy);//{"name":"gyy","age":14,"skills":["c/c++","java","js"],"address":{"city":"wuhan","street":"luoyulu"}}
		var s=JSON.stringify(gyy,null,' ');//按缩进输出结果如下：
		{
		 "name": "gyy",
		 "age": 14,
		 "skills": [
		  "c/c++",
		  "java",
		  "js"
		 ],
		 "address": {
		  "city": "wuhan",
		  "street": "luoyulu"
		 }
		}
	stringify的第二个参数是筛选对象的键值，可以传入array进行筛选
		JSON.stringify(gyy,['name','age'],' ');//结果如下：
		{
		"name":"gyy",
		"age":14
		}
	还可以在第二个参数中传入函数，这样每个键值会被函数先处理
		function convert(key,value){
			if(typeof value==='string'){
				return value.toUpperCse();
			}
			return value;
		}
		JSON.stringify(gyy,convert,' ');//那么所有的值如果是字符串，都会被替换为大写
	还可以给对象gyy定义一个toJSON()方法，直接返回JSON应该序列化的数据
		var gy={
			name:'gyy',
			age:18,
			gender:'male',
			toJSON:function(){
				return{
					'Name':this.name,
					'Age':this.age,
				}
			}
		}
	对于一个JSON格式的字符串，可以直接用JSON.parse()将它转化为一个JavaScript对象
		JSON.parse('[1,2,3,true]');//[1,2,3,true]
		JSON.parse('{"name":"gyy","age":14}');//{name:'gyy',age:14}
		JSON.parse('true');//true
	JSON.parse()还可以接收一个函数，用来转换解析出的属性
		var obj=JSON.parse('{"name":"gyy","age":14}',function(key,value){
			if(key==='name'){
				return value+'yyy';
			}
			return value;//此时name那个属性的值已经变成了gyyyyy
		})
		JSON.stringify(obj);//{"name":"gyyyyy","age":14}

42、面向对象编程
	两种方式创建新对象
	obj.__proto__=obj0;//obj继承自obj0
	Object.create();//一般使用这种方式创建新对象
		var Student={
			name:'	Robot',
			height:1.2,
			run:function(){
				console.log(this.name+' is running...');
			}
		}
		function createStudent(name){
			var s=Object.create(Student);//基于Student原型创建一个新对象
			s.name=name;//初始化新对象
			return s;
		}
		var me=createStudent('gyy');
		me.run();

43、创建对象
	js可以通过一个构造函数来创建对象：
		function Student(name){
			this.name=name;
			this.hello=function(){
				return this.name;
			}
		}
		var xiaoming=new Stuent('xiaoming');
		var xiaohong=new Stuent('xiaohong');
		xiaoming.hello===xiaohong.hello;//false，此时是两个函数，占两份内存
	当把对象的hello()函数创建到原型对象，就只需要一个函数就可以了，他们是共享的
		function Student(name){
			this.name;
		}
		Student.prototype.hello=function(){
			return this.name;//此时就只是占用了一份内存，因为这个函数在原型对象中，同一个函数大家共享
		}
	上述过程最低级对象xiaoming和xiaohong，然后最高对象Student，他们中间有个原型对象，这个原型对象就是xiaoming和xiaohong对象所继承的对象，它的表示方法是Student.prototype，
	它也可以描述Student对象，Student=Student.prototype.constructor

44、原型继承
	定义新的构造函数，并且在内部调用call()调用希望继承的构造函数，并绑定this
	借助中间函数F()实现原型链继承，最好是通过封装的inherits函数完成
	继续在新的构造函数的原型上面定义新的方法
	此外在js中，对一个变量定义默认值的方式是通过||：
		var gyy=abc||'xyz';//当字符串变量为空时，gyy的值为默认值'xyz'，只要abc不为空，那么gyy的值都是abc的值
	通过继承链函数可以将上面提到的F()函数封装起来
		function inherits(Child,Parent){
			var F=function(){};
			F.prototype=Parent.prototype;
			Child.prototype=new F()；
			Child.prototype.constructor=Child;
		}
	整个继承链如下：
	xiaoming------------------------------->new F()---------------------------------->原型对象------------------------------>原型对象------------------------------>null
						 ||					    ||					    ||
                                        PrimaryStudent.prototype                 F.prototype=Student.prototype                 Object.prototype
	实例如下：
		function Student(props){
			this.name=props.name||'Unnamed';//默认值为Unnamed
		}
		Student.prototype.hello=function(){
			return this.name;//子类共享的方法
		}
		function PrimaryStudent(props){
			//子类
			Student.call(this,props);//通过父类的构造函数调用子类对象，将this绑定到子类对象上面
			this.grade=props.grade||1;
		}
		inherits(PrimaryStudent,Student);//实现继承链
		PrimaryStudent.prototype.getGrade=function(){
			return this.grade;//子类自己的方法
		}
		var gyy=new PrimaryStudent({
			name:'gyy',
			grade:13
		})//传入一个对象作为参数，然后构造gyy对象，就实现了原型继承

45、class继承
		class Student{
			constructor(name){
				this.name=name;
			}
			hello(){
				return this.name;
			}
		}
		var gyy=new Student('gyy');
		gyy.hello();
		//继承extends
		class PrimaryStudent extends Student{
			constructor(name,grade){
				super(name);//调用父类的构造方法
				this.grade=grade;
			}
			myGrade(){
				return this.grade;
			}
		}
	class继承和原型继承本质上是一样的，只是为了编程更加容易

46、Promise对象
	每一个异步任务立刻返回一个Promise对象，由于是立刻返回，所以可以采用同步操作的流程，Promise对象有一个then方法，允许指定回调函数在异步任务完成后立刻调用
	Promise对象有三种状态：
		异步操作未完成(pending)，异步操作已完成(resolved)，异步操作失败(rejected)
		变化过程：
			从未完成到已完成
			从未完成到失败
	Promise使用then方法添加回调函数，一个是异步操作成功时的回调函数，一个是异步操作失败时的回调函数
		//下面创造一个Promise实例
		var promise=new Promise(function(resolve,reject){
			//异步操作的代码
			if(/*异步操作成功*/){
				resolve(value);
			}
			else{
				reject(error);
			}
		});
	resolve函数的作用是将Promise对象的状态从未完成变为已完成，并且将异步操作的结果作为参数传递出去,reject函数的作用将状态从未完成变成失败，将错误作为参数传递出去

47、async函数
	async函数返回一个Promise对象，可以适应then方法添加回调函数，当函数执行的时候，一旦遇到await就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句
