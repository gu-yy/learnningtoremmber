1、记一个很铁憨憨的错误
	在执行npm install的时候，一直提示找不到make，我居然很久没有反应过来，还去网上找了很久，原来在执行npm install安装模块的时候需要make
	所以安装make：apt install make
2、这是一个很简单的错误
	在注册管理员(enroll user admin)的时候，有可能会抛出异常:gRPC binary module was not installer
	此时执行npm rebuild就可以解决问题
3、使用logspout观察PaperNet的输出，首先进入目录：
	cd commercial-paper/organization/magnetocorp/configuration/cli/
	然后执行脚本：
	./monitordocker.sh net_basic
	net_basic是前面启动的网络
4、在终端中cd到某一个目录中，然后使用命令：
	code .
	就可以将这个目录自动在vscode中打开了
5、搭建first-network的时候，有一个大坑
	因为现在最新版的源码已经更新到1.4.2，然而在first-network的配置文件configtx.yaml中，channel,orderer,application都不支持1.4.2的capabilities，所以在执行./byfn的时候会报错，orderer节点不能启动
	解决的方法是切换为之前的版本1.4.0：
		git checkout v1.4.0
	然后重新执行：
		./byfn.sh generate
		./byfn.sh down
		./byfn.sh up
6、在官方文档的实验（Adding an Org to a Channel）中，有两处导入环境变量：
	export CORE_PEER_ADDRESS=peer0.org2.example.com:9051
	export CORE_PEER_ADDRESS=peer1.org3.example.com:12051
	这两处的9051和12051都需要改成7051，因为9051和12051是docker容器映射到宿主机器的端口号，但是docker容器内部的端口号还是7051，而这两个环境变量都是docker容器内部的环境的环境变量，所以要改为7051。
	当一个节点刚加入一个fabric网络并且执行channel中的链码的时候，此时链码的镜像在这个节点上还没有安装，所以第一次使用链码的时候需要take a minute来等等结果。
7、git fetch origin//作用是从远程的refs/heads/命名空间复制所有的分支，并且将它们存到本地的refs/remotes/origin/命名空间中
	git branch -a //查看所有的分支，前面带*就是本地头指针当前位于的分支，也就是当前正在使用的分支
	git branch -r //查看远程所有分支
8、在对节点升级版本的时候，首先会导入环境变量export IMAGE_TAG=$(go env GOARCH)-1.4.2,此时IMAGE_TAG=amd64-1.4.2(我的计算机是linux-amd64)，这个IMAGE_TAG会在./base/docker-compose-base.yaml和./base/peer-base.yaml中使用到，用来定义peer和orderer节点的版本。此外在重新启动节点的时候，加的参数--no-deps表示的意思是启动这个镜像的时候不需要其他的依赖。
