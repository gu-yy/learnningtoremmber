一个程序在运行的时候就相当于一个进程，单线程的意思就是这个进程由一个线程组成，此时线程就是进程，多线程就是一个进程包含两个以上的线程(应该是用重写run方法添加多线程)
进程Process-------A
	|
	|---------B
	运行的程序(进程Process)是多线程，包含两个线程A和B

当有两个线程A和B在执行的时候：
	首先是执行线程A，当线程A执行到某个阶段然后被阻塞，例如需要等待I/O操作，此时可以有如下几种操作：
		1、一直等到I/O操作执行完毕，才接着往下运行，而不运行其他的代码--------同步阻塞
		2、程序不等待线程A的I/O操作执行完毕，直接转而去执行线程B，并且每隔一段时间程序会返回线程A去检查它的I/O操作是否执行完毕，执行完毕后就接着运行线程A的后面的代码--------------------同步非阻塞
		3、当线程A执行I/O操作的时候，程序需要等待I/O操作执行完毕，而不能做其他事情，但是程序不会定时检查I/O操作时候执行完毕，而是线程A执行完I/O操作以后主动告知程序，然后程序收到这个消息以后接着执行线程A后面的代码--------------------------异步阻塞
		4、当线程A执行I/O操作的时候，程序可以转而执行线程B，而不需要等待线程A的I/O操作完毕，并且线程A执行完I/O操作以后会主动通知程序，然后程序可以接着执行线程A。
	总的来说，同步和异步的区别就是当一个线程执行某一项任务，然后会产生一个结果，如果这个结果是需要程序去向线程查询，那么就是同步，如果线程会主动通知程序结果，那么就是异步
	阻塞和非阻塞的区别就是，当一个线程阻塞了，比如执行某项任务需要一定的时间，那么在这个时间内程序控制器不能执行其他的任务，而非阻塞就是在这个时间段内，程序控制器可以执行其他的任务		


锁：
	当有两个用户A和B，以及数据data，在没有对data上锁的情况下，A和B都有对数据data进行读写的权限
		当data=1
		A-1、用户A读取了data=1;
									B-1、用户B读取data=1,并且执行了data=data+2;						
									B-2、用户B将数据写回内存，此时写入的data=3;		
		A-2、用户A第一次得到的数据1，那么A将再次读取数据data并且赋值给另一个变量newData，那么A就认为newData的值为1，但是事实上此时newData的值为3
	为了防止这种情况的发生，所以在用户A对数据data的操作没有执行完毕以后，就对data上锁，此时用户B在这期间就不能对数据data做出改动
