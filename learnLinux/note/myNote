aliyun：gyy@106.15.180.187 gu408447

1、BIOS与CMOS
	CMOS是记录计算机的各个硬件的各项参数，这些参数供BIOS读取并且使用
	BIOS是写入到主板的一个软件，开机自动执行，这个软件调用CMOS中记录的各项参数，然后BIOS会对去硬盘的第一个扇区的MBR位置，MBR中装载了最基本的引导加载程序(boot loader)，这个引导加载程序会加载内核文件，然后启动操作系统

2、boot loader
	boot loader提供不同的开机选项，支撑后面的多重引导
	直接指向可以开机的的程序区段来开始操作系统
	加载其他loader：例如同时具有windows和linux，那么这两个系统会在不同的分区里面，那么MBR中的boot loader可以加载这两个分区中的两个操作系统各自对应的loader，此时提供的就是多重加载的功能，系统各自的loader会加载各自系统的程序区段来启动对应的操作系统。

3、在root用户下创建一个新的普通用户
	useradd -d /home/gyy -m gyy
	passwd gyy

4、~目录是当前用户的主文件夹，例如用户gyy，那么他的~表示/home/gyy/，而如果是root用户，那么~表示/root

5、命令行其实本质上就是一个shell程序

6、命令构成：command [-options] parameters1 parameters2 ...
		命令+选项+参数1+参数2+...
	当命令太长了，可以使用反斜杠\来进行对回车符号的转义，使命令在下一行接着执行。
	ls -a//参数-a的作用是列出所有的文件，不加-a那么隐藏文件就不会被列出
	date//显示当前系统时间
	date +%Y/%m/%d--%H:%M:%S//分别表示年月日时分秒
	cal//显示日历，本月的
	cal 2019//显示2019年的日历
	cal [[month] year]//显示某年某月日历
	echo $LANG//显示当前终端中使用的语言，LANG=en_US//将终端中的语言改为en_US
	bc//好用的计算机命令
		默认情况下bc是计算整数的，如果在进入计算机以后输入：
			scale=3
		那么这个计算机就是计算小数位为3的浮点数的计算
		此外^表示指数，3^2=9

7、快捷键ctrl+d，它的功能和exit一样

8、一个非常重要的查询指令，它可以查询某个命令的用法
	man cd
	查询cd命令的用法
	进入man page以后，第一行是AAA(1-9)，前面的英文字符应该代表命令的名字，括号中的数字为1-9，它很重要，它将命令分类：
		1：用户在shell环境中可以操作的命令或者可执行文件
		2：系统内核可调用的函数或者工具等
		3：一些常用的函数或者函数库，大部分为C的函数库
		4：设备文件的说明，通常在/dev下面
		5：配置文件或者某些文件的格式
		6：游戏
		7：惯例与协议，例如linux文件系统，网络协议，ASCII code等的说明
		8：系统管理员可以使用的命令
		9：跟kernel有关的文件
	记住1,5,8三个数字的类型
	man page大致分为如下几个方面：
		NAME:命令的名字和说明
		SYNOPSISSS:简短的命令执行语法简介
		DESCRIPTION:较为完整的说明
		OPTION:列举所有可用的选项说明
		COMMANDS:当这个程序在执行的时候可以在这个程序中执行的命令
		FILE:这个程序或数据所使用的或者参考或连接到文件
		SEE ALSO:这个命令或者数据有相关的其他说明
		EXAMPLE:一些可以参考的范例
		BUGS:是否有相关的错误
	在man page中可以使用空格向下翻页或者pgup和pgdn翻页，home去到第一页，end去到最后一页
	使用/string进行查找，例如查找date则/date
		man -f command//作用是查看当前命令command具有哪一些说明文档
		man -k command//作用是将那些说明文档中含有command这个关键字的命令都找出来

9、关机
	who命令可以查看当前在线用户
	shutdown当在图形界面时任何用户都能关机，但是如果是ssh等远程服务中必须要root权限才能执行关机

10、修改密码，在命令行中输入passwd就可以直接修改当前用户的密码了

11、用户(owner),用户组(group),其他(others)
	linux是多用户，多任务系统，每个用户可以同时加入多个用户组，root用户拥有所有权限
	所有的用户包括root用户的用户信息都保存在/etc/passwd这个文件中，个人的密码则记录在/etc/shadow中，所有的组名都记录在/etc/group中

12、权限
	-rwxrw--wx 1 root root 1023 Sep 4 18:26 install.lob
		第一列表示文件类型：
			d:表示这是一个目录
			-:表示这是一个文件
			l:表示这是一个连接文件(linkfile)
			b:表示设备文件里面可供存储的接口设备
			c:表示设备文件里面的串行端口设备，例如鼠标，键盘（一次性读取设备）
		后面九列分为3个三列，分别表示文件所有者的权限，用户组权限，其他用户权限
		之后的1表示有多少个文件名连接到此文件(节点)
		第一个root表示文件所有者
		第二个root表示文件所属的用户组
		1023表示文件的大小，单位是B(字节)
		后面三列表示文件最后被修改的时间，分别是月，日，时:分，如果文件被更改的时间太久远，那么时:分就会被改成年
		最后就是文件名
			当某个用户对某个目录的权限为r，那么这个用户是不能进入这个目录的，因为他没有x权限，只有x权限才能进入目录

13、关于文件用户和权限的几个重要命令
	chgrp:改变文件所属用户组
		chgrp gyy abc.txt//将abc.txt的所属的用户组改为gyy
	chown:改变文件所有者
		chown gyy abc.txt//将abc.txt的所有者改为gyy
		chown同时改变所有者和用户组
			chown gyy:gyy abc.txt//将abc.txt的所有者和用户组同时改变
	chmod:改变文件的权限
		r:4
		w:2
		x:1
		所以除了用rwx来更改权限，还可以使用数字来更改权限
		u:所有者
		g:用户组
		o:其他用户
			+：加入权限，只是加上某个权限
			-：减去权限，只是减去某个权限
			=：设置权限，会清除原来的文件权限
		chmod u=rwx,go=rx abc.txt//所有这有rwx权限，用户组和其他用户有rx权限
	如果更改目录的权限，并且要更改目录下面所有的文件的权限，那么需要加上-R参数，意思是递归更改
		chgrp -R gyy def//将目录def以及def下的所有文件的用户组改为gyy
	在用户gyy的主目录/home/gyy/下面有一个属于root用户的文件，此时对于这个文件来说，用户gyy是其他用户，权限如下：
		-rwxrwxr-- root root 
			所以gyy只有读取这个文件的权限，但是由于在gyy的主目录下，gyy对这个目录具有rwx权限，所以即使gyy不能wx这个文件，然是可以执行的操作是删除这个文件

14、文件类型
	cat ~/.bashrc//cat命令是的作用是读取文件到屏幕上
		普通文件：
			符号为-
			ASCII文件:纯文本文件，可以直接读取到文件
			二进制文件:计算机认识并且可以执行的文件都是二进制文件，例如cat命令其实就是一个二进制文件(binary file)
			数据格式文件:某些程序在运行的时候会以特定的方式读取特定的文件中的数据，而用户以正常的方式比如cat读取，则会读取到乱码，这些文件就是数据格式文件(data file)
		目录:
			符号为d
		连接文件：
			类似于windows下面的快捷方式，符号为l
		设备与设备文件
			块设备文件(block):
				符号为b
				他们是存储数据，供系统可以随机访问的接口设备，如硬盘等
			字符设备文件(character):
				符号为c
				串行端口的接口文件，如鼠标，键盘，特点是不能够截断输出多次读取，只能够一次性读取
					串行端口是指数据一位一位的顺序传送，通信线路简单，但是传输速率慢
		套接字文件(sockets):
			这种文件通常被用在网络上的数据链接
			符号为s
			文件后缀一般为.sock
		管道文件(FIFO,pipe):
			符号为p
			目的一般是解决多个程序同时访问同一个文件造成的错误问题
			机制是first in first out

15、文件扩展名
	基本上linux中文件是没有扩展名的，文件的类型至于在ll(ls -l)命令下第一列的文件符号有关
	但是为了方便，还是定义了一些扩展名
		基本上，扩展名也只是为了方便，与文件类型关系不大，这一点与windows不同哦～
	当文件名由点号.开始，说明这是一个隐藏文件

16、目录配置
	标准：Filesystem Hierarchy Standard(FHS)
	根目录/所在的分区越小越好，这样存放的数据少，出错的机会少
	/(root目录):与开机有关
	/usr(UNIX software resource):与软件安装执行有关
	/var(variable):与系统运作有关.
		/bin:
			放置单用户维护模式下能被操作的命令，能够被root和普通用户共同使用
		/boot:
			放置开机所使用的文件，包括内核文件及配置文件
			linux kernel常用文件名为vmlinux，而grub则是引导装载程序
		/dev:
			放置设备与接口设备文件的地方
		/etc:
			放置系统主要的配置文件，例如账户密码，各种服务的起始文件
			/etc/init.d/:
				所有服务的默认启动脚本都在这个目录下
			/etc/xinetd.d/:
				super deamon管理的各项服务的配置文件目录，(super deamon:超级守护进程)
		/home:
			用户主文件夹，放置各个用户，除了root
		/lib:
			放置开机时所用到的库文件以及/bin和/sbin中的可执行程序所需要的库文件
		/meidia:
			放置可移动设备，例如U盘
		/mnt:
			用于暂时挂载某些额外的设备
		/opt:
			第三方软件放置的目录
		/root:
			root用户的主文件夹
		/sbin:
			开机，修复，还原系统所需要的命令
		/srv:
			一些网络服务启动后，这些服务需要取用的数据
		/tmp:
			用户或者正在执行的程序暂时存放文件的地方
		/lost+found:
			当文件系统发生错误时，将一些丢失的片段放在这个目录下
		/proc:
			这是一个虚拟文件系统，这里面的数据都在内存中，而不是在硬盘中，主要存放系统内核，进程，外部设备的状态及网络状态等信息，这个目录不占用硬盘空间
		/sys:
			这个目录也是一个虚拟文件系统，主要记录与内核相关的信息
		/usr:
			所有系统默认的软件都会放到这个目录下
			/usr/bin/:
				绝大部分用户可以使用命令
			/usr/include/:
				c/c++等程序语言的头文件放在这个地方
			/usr/lib/:
				包含各个应用软件的函数库，目标文件(object file)，以及一些执行文件和脚本（用户不惯用的）
			/usr/local/:
				系统管理员自己安装下载的软件，而不是系统默认的软件放置的地方
			/usr/sbin/:
				非系统正常运行所需要的系统命令，主要是一些网络服务器软件的服务命令(daemon守护进程)
			/usr/share/:
				共享文件放置的地方
					/usr/share/man:在线帮助文件
					/usr/share/doc:软件的说明文档
					/usr/share/zoneinfo:与时区有关的时区文件
			/usr/src:
				放置一般源码的地方，而内核源码(kernel)则放置到/usr/src/linux/下
				有可能内核源码也放在这里/usr/src/kernels
		/var:
			/usr在安装的时候会占用较多的硬盘容量，而/var则是在系统运行时，会越来越占用更多的内存
			/var主要是存放一些动态变动的文件，例如cache,登录文件(log file)，以及程序运行时所产生的文件，包括程序呢文件，例如MySQL
			/var/cache/:
				程序运行时产生的一些缓存文件
			/var/lib/:
				程序在执行的时候，需要使用的数据文件放置的目录
			/var/lock/:
				用于对系统资源上锁的文件
			/var/log/:
				用于存放登录文件的地方
			/var/mail/:
				放置个人电子邮件信箱的目录
			/var/run/:
				某些程序启动以后，会将他们的PID放置到这个目录下面
			/var/spool/:
				存放一些队列数据，队列数据的作用是排队等待其他程序使用的数据

17、目录相关
	几个特殊目录:
		.	代表当前目录
		..	代表上一层目录
		-	代表前一个工作目录
		~	代表当前用户的主目录
		~gyy	代表用户gyy的主文件夹
	几个目录的操作：
		cd	切换目录，change directory
		pwd	显示当前目录的路径，print working directory
				pwd -P//其中-P参数的作用是显示当前路径而不是连接的路径
		mkdir	创建新目录
				mkdir -p//-p参数的作用是创建多层目录
				mkdir -m 777//-m参数的作用是给刚创建的目录设置一定的权限
		rmdir	删除空目录，记住只能够删除空目录
				rmdir -p//同时删除上层空目录，这命令不重要吧，因为有 rm -rf //可以删除不是空的目录
	几个关于文件的命令
		cp:
			复制文件
			创建链接文件(windows中的快捷方式)
			比较两个文件并且能执行更新
				-a	相当于-pdr(不知道什么意思)，应该是数据特性，比如文件所有者，用户组，已经文件改变的时间等信息都会同时复制过去，不会发生任何改变，应该和-p差别不大
				-i	当目标文件存在时，先询问是否覆盖
				-s	创建软连接文件(快捷方式)
				-r	复制目录
				-p	连同文件的属性一起复制过去，常用于文件备份
				-u	当源文件source和目的文件都存在destination，并且目的文件比源文件旧，才发生更新（有差异才更新）
				-d 	若源文件是连接文件，那么不加-d参数，就会直接复制源文件（也就是被连接的文件），加-d参数以后就直接复制连接文件而不是源文件
				当将文件复制到当前目录，那么目的文件的地址是点号.
					cp /var/log . //将/var/log复制到当前目录
				
		mv:
			移动文件
			文件重命名
				-u	若目标文件存在，并且比源文件新，才会发生更新
		rm:
			删除文件
	几个查看文件内容的命令
		cat:
			从第一行开始显示文件内容
				-n	打印行号
				-b	打印行号，只针对非空白行，空白行不标号
		tac:
			从最后一行开始显示文件内容，也就是说它和cat刚好相反，是从最后一行开始打印的
		nl:
			顺便显示文件内容的行号
		more:
			一页一页显示内容
			空格键表示向下翻一页
			回车键表示向下翻一行
			/字符串 表示 向下查询字符串
			:f 立刻显示文件名与行数
			b 表示往回翻页
		less:
			与more类似
		tail:
			只看结尾几行
		od:	
			以二进制方式读取文件
		head:
			以行为单位，默认显示前面10行
				-n 5 //表示显示前面5行
		tail:
			默认显示后面10行
				-n 5默认显示后面5行
	几个对文件操作的命令
		touch [-acdmt] 文件
			-a	仅修改访问时间
			-c	仅修改文件时间，若文件不存在，则不创建新文件，记住是不创建，不 不不不吧u不不 
			不接参数就创建新文件
		umask
			当前用户创建文件或者目录的时候，文件或者目录的默认权限
				umask
				0022	第一个数字是隐藏权限，后面就是用户，用户组，其他用户的权限，并且这里022是创建的文件或者目录默认去掉的文件
				umask -S
				u=rwx,g=rx,o=rx
				umask 002	将默认权限改为775

18、文件的隐藏属性chattr,lsattr
		chattr:	
			设置属性
			chattr [+-=] [ASacdistu] 文件或者目录
				a	只能向文件增加数据，而不能删除或者修改数据
				c	会自动将文件压缩，只有在读取的时候才会自动解压缩
				i	可以让文件不能够被删除，改名，并且不能写入或者添加数据
		lsattr:
			可以查看文件或者目录的隐藏属性

19、文件的特殊权限：SUID,SGID,SBIT
	SUID:
		Set UID
			当s这个标志出现在文件所有者的x权限上面时，此时就称为Set UID，也就是SUID特殊权限
			SUID仅对二进制程序有效
			执行者对于该程序需要具有x的可执行权限
			本权限仅在执行该程序的过程中有效
			执行者将具有该程序的所有者权限
				例如：
					文件/etc/shadow只有root用户才能读取修改
					但是二进制文件/usr/bin/passwd的权限为-rwsr-xr-x，并切它的所有者是root
					所以在普通用户gyy执行passwd的时候，因为passwd具有s也就是SUID权限，并且gyy具有passwd的x可执行权限，
					所以在执行passwd的过程中能够暂时获得passwd的所有者root的权限，也就是能修改用户的密码了
					而/bin/cat的权限是-rwxr-xr-x，并且所有者是root，但是由于没有SUID权限，所以不能获得所有者的权限
	SGID:
		Set GID
			当s这个标志出现在文件用户组的x权限上面时，此时就称为Set GID，也就是SGID特殊权限
			SGID可以针对文件或者目录来设置，而不只是二进制文件
			SGID对二进制文件有用
			程序执行者对于该程序需要有x可执行权限
			执行者在执行该程序的过程中将会获得该程序用户组的支持，这一点与SUID非常相似
			但是SGID也能够用在目录上面
				例如：
					当一个文件设置了SGID权限时
					当用户具有此目录的r与x权限时，用户能够进入这个目录，并且在这个目录下面该用户的有效用户组将会变成该目录的用户组
					当用户还具有w权限时（此时可以在目录下创建新的文件），用户创建的新的文件与此目录的用户组相同
	SBIT:
		Sticky Bit
			当t这个标志出现在目录上其他用户的x权限时，表示此目录具有SBIT权限
			这个权限只对目录有效
			当用户具有此目录的w与x权限时，此时，该用户在这个目录下面创建的文件只有自己与root才能够删除
				例如另一个用户对于目录具有w权限，那么在正常情况下，他可以删除这个目录下的文件，但是此时，SBIT他就只能够删除自己创建的文件了	
	添加特殊权限
		SUID	4
		SGID	2
		SBIT	1
			在用普通数字设置普通权限时，在前面再加上一个数字，例如设置SUID权限
				chmod 4755 filename //表示给filename这个文件设置权限为-rwsr-xr-x
			还可以使用字母设置权限
				u+s
				g+s
				o+t
				chmod g+s,o+t test  //加上SGID和SBIT权限

20、查看文件类型
	file filename //查看filename文件的类型
		ASCII文件
		data文件
		binary文件

21、命令与文件的查询
	which	寻找“执行文件”的位置，例如寻找ls	which ls
		which [-a] command
			-a	将所有由PATH目录中可以找到的命令列出，而不仅仅是找到的第一个命令
	whereis	寻找特定文件
		whereis [-bmsu] 文件或目录名
			-b	只找二进制文件
			-m	只找说明文件manual路径下的文件
			-s	只找source源文件
			-u	查找不在上面3个选项中的特殊文件
	find	这个命令很重要，它是去硬盘上面查找文件，而上面的命令是去系统的数据库中查找文件，所以这个命令查找速度会慢很多
		find [PATH] [option] [action]
			以mtime为例
				-mtime n	n天之前的一天之内有改动的文件
				-mtime +n	n天之前，不含n天，改动的文件
				-mtime -n	n天之内改动的文件
				-newer file	列出比file还要新的文件
						    4
						<------->
				7	6	5	4	3	2	1	0(现在)
				<-------|-------|-------|-------|-------|-------|-------|		
				<---------------|
					+4				-4
							|------------------------------->
			查找与用户或者用户组有关的文件
				-uid n
				-gid n
				-user name
				-group name
				-nouser		寻找文件所有者不在/etc/passwd中的人的文件
				-nogroup	寻找文件的用户组不在/etc/group中的用户组的文件
					find /home -user gyy
			与文件名和文件权限有关的参数
				-name filename		查找明文filename的文件
				-size [+-]SIZE		查找比SIZE大或者小的文件，单位c表示byte,k表示1024bytes
				-type TYPE		查找类型为TYPE的文件
				-perm MODE		查找权限刚好等于MODE的文件
				-perm -MODE		查找权限必须包括MODE的文件，也就是说权限比这个大的文件会被找到
				-perm +MODE		查找被权限MODE包含的文件，权限比这个小的文件会被找到
			find的特殊用途
				find / -perm +7000 -exec ls -l {} \;
					{}	查找到的内容会被放到{}中
					-exec一直到\;都是关键字，代表find的额外命令由-exec开始直到\;结束，这之间就是额外命令，本利中就是 ls -l {}
				通过通配符查找文件
					find /etc -name '*http*'
						查找文件名中包括http的文件
22、EXT2文件系统
	linux中，文件的权限(rwx)与文件属性等放在inode中，而实际的文件数据放到了data block中
	超级块(super block)存放整个文件系统的信息，包括inode和block的总量，使用量和剩余量
		索引式文件系统：
		super block:	记录文件系统的整体信息，包括inode/block的总量，剩余量，使用量，以及文件系统的格式和相关信息
		inode:		记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的数据block号码
		block:		实际记录文件数据的地方，如果文件内容多，那么会占据多个block
		FAT式（U盘等闪存工具）
			没有inode，而是将数据存入block中，并且在读完上一个block后，在上一个block中可以得知下一个block的块号，从而继续读取下一个块
		当block分布得太分散后，那么，读取的速度就会大大的减慢，那么就需要进行碎片整理
	
	在ext2文件系统中
		首先是启动扇区(boot sector)，它的作用是用来安装加载bootloader，而不用将所有的bootloader放入到MBR，从而实现了多重引导
		接下来就是多个块组(block group)
			当硬盘较大，那么会有超级多的inode和block，那么此时管理起来就极度不方便，此时的做法就是将块(block)分组，每个块组包含自己独立的inode/block/superblock
			一个块组(block group)包含以下几个方面：
				df	查看目前已经挂载的设备
				dumpe2fs [-h] 设备名
					-h	仅列出superblock的内容
				data block
					每个block的大小在格式化的时候就确定了
					每个block中，只能村存放一个文件的内容
					如果一个文件大于一个block，那么就会占据多个block，如果一个文件小于当前的block，那么这个block中剩余的空间也不能使用了
				inode table
					文件的访问模式(rwx)
					文件的所有者与用户组
					文件的大小
					文件创建或者状态改变的时间(ctime)
					文件最后一次被读取的时间(atime)
					文件最后一次修改的时间(mtime)
					文件的特殊权限的标志，例如SUID等
					文件真正内容的指向(pointer)
					每个inode的大小为128bytes
					每个文件只占用一个inode
					文件系统能创建的文件数量与inode的数量有关，并且读取文件的时候，会首先检查inode记录的权限是否与用户符合
						ext2文件系统的inode记录block号码的方式为12个直接，1个间接，1个双间接，1个三间接
							所谓的直接就是在inode中直接指定块的块号
							所谓的间接就是在inode中指定一个块，这个块中不存放数据，继续存放块号，此时的块号才是存放数据的块号，这就是间接
				inode 对应表
					inode bitmap
					inode bitmap中记录了哪一些inode没有使用
				块对应表
					block bitmap
					从block bitmap中可以知道哪一些block是空的，从而可以存放数据
				文件系统描述
					file system description
					这个区段描述每个block group的开始与结束的block号码
					描述(superblock,bitmap,inodemap,datablock)分别介于哪一个block号码之间
				super block
					super block记录整个文件系统的相关信息，没有它，就没有文件系统
					block与inode的数量（总数量，已经使用，剩余量）
					block与inode的大小，block的大小为1K,2K,4K，inode的大小为128bytes
					文件系统的挂载时间，最后一次写入数据的时间，最后一次检验磁盘(fsck)的时间等文件系统相关信息
					一个valid的bit值，如果此文件系统已经被挂载，那么值为0，如果未被挂载，那么值为1
						理论上一个文件系统只有一个super block，但是事实上除了第一个block group含有super block，其他的block group也有可能含有super block，他们的作用主要就是备份
		对于每一个目录也会分配一个inode和至少一个block，
			inode用于记录目录的权限与属性，block则是用来记录目录中的文件的名字以及该文件占用的inode的号码
23、文件创建过程
	首先在inode bitmap中找到没有使用的inode号码，并将文件的权限与属性写入这个inode table
	然后在block bitmap中找到没有使用的block号码，并将数据写入这个block中，并且让inode指向block
	将这个两个inode bitmap和blokc bitmap设置为已经使用
		当这个过程执行不成功，例如将数据写入了inode和block，但是在最后将inode bitmap和block bitmap设置为已经使用的时候出错了，那么就会造成数据不一致的问题
		解决这个问题的方法就是日志文件系统
			预备
				即将数据写入inode和block
			实际写入
				已经将数据写入inode和block，但是没有更新inode bitmap和block bitmap
			结束
				成功更新inode bitmap和block bitmap
		EXT3文件系统就是带有日志系统，并且向下兼容EXT2

24、clean与dirty数据
	当文件从磁盘加载到内存后，没有做出改动，那么就被称为clean数据
	当数据在内存中发生了改变，这些数据就被称为dirty数据
		系统会不定时的将dirty数据写回磁盘

25、文件系统的挂载
	每个文件系统都有inode,block,super block，将文件系统与目录树结合的操作就是文件系统的挂载
	挂载点必须是目录，这个目录就是这个文件系统的入口点

26、虚拟文件系统
	virtual filesystem switch(VFS)
		整个linux内核是通过VFS去读取文件系统的，整个文件系统都是VFS在管理
		底层的文件系统是各种各样的，例如ext2,ext3,xfs等，但是经过上层的VFS将底层的不同的文件系统抽象化为统一的供上层调用的接口，所以底层的文件系统的种类对上层用户是透明的
					用户进程(user process)
					|
					系统调用
					|
					VFS
				   |————|————|————————|
				Minux FS   DOS FS   EXT2/EXT3
				   |———————|————————|
					缓存
					 |
					设备驱动程序
					  |
					磁盘

27、文件系统的简单操作
	df	列出所有文件系统的使用情况
		-h 参数可以表示得更加清除明白
	du	评估文件系统的磁盘使用量
	链接文件 ln
		两类连接文件
			1）类似于windows的快捷方式，快速连接到目标文件
			2）通过文件系统的inode连接产生的新文件名，而不是产生新文件，这个也叫硬连接(hard link)
				hard link(硬连接或者实际连接)
					hard link只是在某个目录下面新建一条文件名连接到某个inode号码的关联记录
					创建硬连接的命令
						ln oldName newName	//创建新的连接newName与旧的的连接oldName连接到同一个文件
					硬连接的一个重要作用就是安全，当删掉其中一个文件名，还能通过另一个文件名找到文件
					通过硬连接，hard link只是在某个目录下的block中多写入了一个关联数据，不会增加inode的使用量，也不会增加block的使用量
					hard link的限制
						不能跨文件系统
						不能够连接到目录
							因为连接目录的时候，需要将连接目录和被连接目录下的所有文件都相对应的创建连接，所以工作量很大，所以不支持
				symbolic link(符号连接或者快捷方式)
					symbolic link创建一个独立的文件，这个文件会让数据的读取指向它连接的那个文件的文件名，所以当被连接的文件被删除以后，symbolic link的文件会打不开
					创建symbolic linK的命令
						ln -s oldName newName
					由symbolic link创建的连接会创建新的文件，所以会消耗inode和block
					symbolic link可以连接到目录
				ln [-sf] 源文件 目标文件
					-s	如果不加就是hard link，否则就是symbolic link
					-f	如果目标文件存在就删除目标文件然后重新创建
				新建目录的时候，创建的目录的连接数是2
					一个是当前目录，一个是父目录
					父目录的连接数会增加1

28、磁盘的分区，格式化，检验与挂载
	1）对磁盘进行分区，以新建可用的分区
	2）对该分区进行格式化(format)，以创建系统可用的文件系统
	3）对刚创建的文件系统进行检验
	4）创建挂载点，并且将它挂载上来
		磁盘分区
			fdisk [-l] 设备名称
		磁盘格式化mkfs(make file system)
			mkfs [-t] 设备文件名
				-t	可以连接文件系统格式，如ext2,ext3,vfat
					mkfs -t ext3 /dev/hdc6
			mke2fs [-b block大小] [-i inode大小] [-L 卷标] [-cj] 设备
				-c	检查磁盘错误
				-j	本来mke2fs默认文件系统是ext2，但是此时加上日志journal会变成ext3
		磁盘检验 fsck(file system check)
			fsck [-t 文件系统] [-ACay] 设备名称
				-A	依据/etc/fstab 扫描设备
				-a	自动修复有问题的扇区
				-y	与-a类似，有的系统不支持-a
				-C	显示进度
			badblock 设备名称
				检测磁盘有没有坏轨
		磁盘挂载与卸载
			单一文件系统不应该重复挂载到不同的目录中
			单一目录不应该重复挂载多个文件系统
			作为挂载点的目录理论上应该是空目录
				mount [-t 文件系统] [-L label名] [-o 额外选项] [-n] 设备文件名 挂载点
				mount -a
				mount -l
					-a	依照配置文件/etc/fstab，列出所有未挂载的磁盘
					-l	显示当前的挂载信息
					-n	默认情况下，系统会将实际挂载情况写入到/etc/mtab中，-n参数的作用就是不让它写入
					-o	后面接一些额外的参数
						ro,rw		将文件系统设置为只读(ro)，只写(rw)
						async,sync	文件系统是否使用同步写入(sync)，或者异步写入(async)，默认为async
						auto,noauto	允许此分区被以mount -a自动挂载
						dev,nodev	是否允许此分区上可以创建设备文件,dev为允许
						suid,nosuid	是否允许此分区上含有suid,sgid的文件格式
						exec,noexec	是否允许此分区上含有可执行binary文件
						user,nouser	是否允许此分区上任何用户执行mount，一般情况只有root可以执行mount
						defaults	默认设置为rw,suid,dev,exec,auto,nouser,async
						remount		重新挂载

29、内存交换空间swap的建立
	swap的功能是在物理内存不足的情况下，进行内存的扩展记录
	当物理内存不足的时候，会将当前时刻cpu用不到的数据从内存移动到swap
		建立步骤
			分区->格式化->使用->查看
			fdisk->mkswap->free->swapon

30、文件压缩
	.gz		gzip程序压缩的文件
	.bz2		bzip2程序压缩的文件
	.tar		tar程序打包的文件，并没有压缩过
	.tar.gz		tar程序先将文件打包，然后经过gzip压缩
	.tar.bz2	tar程序先将文件打包，然后经过bzip2压缩
		gzip [-cdtv#] filename		但是gzip不能压缩文件夹
			-c	将压缩后的文件的数据打印出来，但是并不压缩文件，文件还是原文件
			-d	加入这个参数，gzip的功能就是解压缩
			-v	显示压缩文件与原文件的压缩比例
			-#	压缩等级，1最快，9最慢
				gzip -9 -c gyy > gyy.gz	//这样就会将压缩后的数据存入到gyy.gz中了，而不是打印出来
		cat可以读取文件的内容
		zcat可以读取压缩文件的内容，显示的是压缩文件的原文
		bzip2 [-cdkzv#] filename		//用法基本和gzip相同，但是压缩效果更好，但是这个压缩程序不常用
			-k	保留原文件，而不是直接删除原文件
			-z	加上这个参数表示bzip2在压缩
	打包命令tar
		tar [-j] [-z] [cv] [-f newfilename] filename 			//打包与压缩
		tar [-j|-z] [tv] [-f newfilename]				//查看文件名
		tar [-j|-z] [xv] [-f newfilename] [-C dir]			//解压缩，dir是目录的意思
			-c	新建打包文件，可以通过-v查看过程中被打包的文件
			-t	查看打包文件含有哪些文件名
			-x	解打包或者解压缩的功能，可以搭配-C在特定的目录下面解开
			-j	通过bzip2进行压缩或者解压
			-z	通过gzip进行压缩或者解压，此时文件名最好为.tar.gz
			-v	显示过程中正在处理的文件名
			-f filename	-f后面接被处理的文件名，建议-f单独写一个参数
			-C	解压到特定的目录
			-p	保留文件的权限等信息
	grep命令是选取的意思
	
31、备份命令dump
	备份分为完整备份和比较差异备份
	dump命令的限制是，如果备份的目录不是一个独立的文件系统，那么对于和这个目录进行备份必须进行完整备份
	并且此时不支持-u参数的备份时间记录
	dump分为0-9个level，其中level0表示完整备份
		dump [-Suv] [-level] [-f filename] 待备份数据
		-S	列出此后需要多少磁盘空间才能备份完毕
		-u	将此次备份时间记录到/etc/dumpdateS文件中
		-v	将dump的文件过程显示出来
		-level	备份级别
		-f	类似于tar的-f命令
	
